# -*- coding: utf-8 -*-
import os
import subprocess
import time
# import cv2 # Movido para video_processing se necess√°rio l√°
from dotenv import load_dotenv
import json
# import shutil # Movido para editing ou utils
# import random # Movido para editing
import platform
import sys

from .audio_processing import ( 
    analisar_batidas_audio,
    load_amplitude_data,
    filter_timestamps_by_amplitude
)
from .video_processing import ( 
    extrair_frames,
    detectar_cortes_de_cena 
)
from .utils import (
    resolver_nome_arquivo_yt_dlp, 
    format_seconds_to_hhmmssff,
    comment_line_in_file, # Movido para utils
    # parse_hhmmssff_to_seconds, # Usado em editing.py, importado l√°
    # find_frame_by_number, # Usado em editing.py, importado l√°
    # get_audio_duration # Usado em editing.py, importado l√°
)
from .downloading import baixar_video, baixar_audio_youtube
from .editing import criar_edite_do_json, gerar_edit_json_pelas_batidas
from .config_loader import carregar_configuracao

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Define o diret√≥rio base do projeto (um n√≠vel acima de src)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

try:
    OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
    if not OPENAI_API_KEY:
        pass
except Exception as e:
    pass

# Exemplo de uso
if __name__ == "__main__":
    edit_json_file = os.path.join(BASE_DIR, "config", "edit.json")
    config_geral_file = os.path.join(BASE_DIR, "config", "config.json")

    # Carrega as configura√ß√µes gerais
    config = carregar_configuracao(config_geral_file)
    print(f"Configura√ß√µes de execu√ß√£o: {config}")

    arquivo_links = os.path.join(BASE_DIR, "data", "links.txt")
    pasta_destino_videos = os.path.join(BASE_DIR, "videos_baixados")
    intervalo_para_frames_seg = 1 # Extrair um frame a cada X segundos
    qualidade_dos_frames_jpeg = 75 # Qualidade JPEG (0-100), menor valor = menor tamanho/qualidade
    songs_directory = os.path.join(BASE_DIR, "songs")
    musica_config_file = os.path.join(BASE_DIR, "data", "musica.txt")

    caminho_do_arquivo_de_musica = None
    youtube_url_musica = None
    # Vari√°veis para armazenar os caminhos dos arquivos de batidas gerados
    arquivo_beats_processado = None
    arquivo_beats_with_amplitude_processado = None

    # --- 1. Obter URL da m√∫sica (se download de √°udio ou an√°lise de batidas estiverem habilitados) ---
    if config.get("baixar_audio_da_musica") or config.get("analisar_batidas_do_audio"):
        if not os.path.exists(musica_config_file):
            print(f"‚ö†Ô∏è Arquivo '{musica_config_file}' n√£o encontrado. N√£o ser√° poss√≠vel processar √°udio.")
        else:
            try:
                with open(musica_config_file, "r", encoding='utf-8') as f_music_config:
                    youtube_url_musica = f_music_config.readline().strip()
                if not youtube_url_musica:
                    print(f"‚ö†Ô∏è Arquivo '{musica_config_file}' est√° vazio.")
                    youtube_url_musica = None
                elif not (youtube_url_musica.startswith("http://") or youtube_url_musica.startswith("https://")):
                    print(f"‚ö†Ô∏è Conte√∫do de '{musica_config_file}' ('{youtube_url_musica}') n√£o parece ser uma URL v√°lida.")
                    youtube_url_musica = None
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao ler '{musica_config_file}': {e}")
                youtube_url_musica = None

    # --- 2. Processamento de √Åudio (Download ou Localiza√ß√£o) ---
    if youtube_url_musica:
        # Garante que a pasta 'songs' exista para download ou localiza√ß√£o
        if not os.path.exists(songs_directory):
            try:
                os.makedirs(songs_directory, exist_ok=True)
            except OSError as e:
                print(f"‚ö†Ô∏è Erro ao criar pasta '{songs_directory}/': {e}. Processamento de √°udio pode falhar.")
                youtube_url_musica = None # Impede prosseguimento se a pasta √© crucial

        if youtube_url_musica and config.get("baixar_audio_da_musica"):
            print(f"\nüéµ Tentando baixar √°udio de: {youtube_url_musica}")
            download_audio_func = baixar_audio_youtube # J√° importado de .downloading
            caminho_do_arquivo_de_musica, _ = download_audio_func(youtube_url_musica, songs_directory)
            if caminho_do_arquivo_de_musica:
                print(f"üé∂ √Åudio baixado/localizado via download: {caminho_do_arquivo_de_musica}")
            else:
                print(f"‚ö†Ô∏è Falha ao baixar o √°udio de '{youtube_url_musica}'.")

        # Se o download n√£o foi habilitado OU falhou, mas a an√°lise de batidas est√° habilitada, tenta localizar.
        if not caminho_do_arquivo_de_musica and youtube_url_musica and config.get("analisar_batidas_do_audio"):
            if not config.get("baixar_audio_da_musica"): # Informa que est√° localizando porque download est√° off
                print(f"\nüéµ Download de √°udio desabilitado. Tentando localizar √°udio para an√°lise...")
            # Se chegou aqui ap√≥s falha de download, a msg de falha j√° foi impressa.

            caminho_esperado_musica = resolver_nome_arquivo_yt_dlp(youtube_url_musica, songs_directory, extrair_audio=True)
            if caminho_esperado_musica and os.path.exists(caminho_esperado_musica):
                caminho_do_arquivo_de_musica = caminho_esperado_musica
                print(f"üé∂ √Åudio localizado para an√°lise: {caminho_do_arquivo_de_musica}")
            else:
                print(f"‚ö†Ô∏è √Åudio n√£o encontrado localmente em '{songs_directory}' para a URL '{youtube_url_musica}'.")
                if caminho_esperado_musica:
                     print(f"   Caminho esperado (n√£o encontrado): {caminho_esperado_musica}")
    elif config.get("baixar_audio_da_musica") or config.get("analisar_batidas_do_audio"):
        print("\n‚ÑπÔ∏è Nenhuma URL de m√∫sica v√°lida fornecida em '{musica_config_file}'. Processamento de √°udio pulado.")

    # --- 3. An√°lise de Batidas (se habilitada e √°udio dispon√≠vel) ---
    if config.get("analisar_batidas_do_audio"):
        # Verifica se librosa est√° instalado antes de tentar analisar
        try:
            import librosa
            import numpy as np
            librosa_disponivel = True
        except ImportError:
            librosa_disponivel = False
            print("\n‚ö†Ô∏è An√°lise de batidas desabilitada: librosa ou numpy n√£o est√° instalado.")
            print("   Por favor, instale com: pip install librosa numpy")


        if librosa_disponivel:
            audio_para_analise_encontrado = None
            # Tenta encontrar um arquivo de √°udio na pasta 'songs'
            if os.path.exists(songs_directory) and os.path.isdir(songs_directory):
                audio_extensions = ('.mp3', '.wav', '.aac', '.m4a', '.ogg', '.flac')
                for f_name in sorted(os.listdir(songs_directory)): # sorted para consist√™ncia
                    if os.path.isfile(os.path.join(songs_directory, f_name)) and f_name.lower().endswith(audio_extensions):
                        audio_para_analise_encontrado = os.path.join(songs_directory, f_name)
                        print(f"\nüéµ √Åudio encontrado para an√°lise de batidas: {audio_para_analise_encontrado}")
                        break

            if audio_para_analise_encontrado:
                fps_referencia_batidas = 25
                pasta_batidas_analisadas = os.path.join(songs_directory, "analise_batidas")
                # A fun√ß√£o analisar_batidas_audio agora vai limpar a pasta e nomear o arquivo como beats.txt
                arquivo_beats_processado, arquivo_beats_with_amplitude_processado = analisar_batidas_audio(audio_para_analise_encontrado, pasta_batidas_analisadas, fps_para_timestamp=fps_referencia_batidas)
                # As mensagens de sucesso ou falha j√° s√£o impressas dentro da fun√ß√£o
            else:
                print(f"‚ÑπÔ∏è An√°lise de batidas pulada: nenhum arquivo de √°udio encontrado na pasta '{songs_directory}'.")
        # else: (mensagem de librosa n√£o dispon√≠vel j√° foi impressa)
    else:
        print("\n‚ÑπÔ∏è An√°lise de batidas do √°udio desabilitada nas configura√ß√µes.")

    # --- 3.1. Filtragem de Batidas por Amplitude (se habilitada) ---
    filter_config = config.get("filtrar_batidas_por_amplitude", {})
    # Verifica se a configura√ß√£o √© um dicion√°rio e se 'enabled' √© True
    if isinstance(filter_config, dict) and filter_config.get("enabled"):
        print("\n‚öôÔ∏è Tentando filtrar batidas por amplitude...")
        # Check if the necessary files were generated by the analysis step
        if arquivo_beats_processado and arquivo_beats_with_amplitude_processado and os.path.exists(arquivo_beats_processado) and os.path.exists(arquivo_beats_with_amplitude_processado):
            min_amp_percentage = filter_config.get("min_amplitude_percentage", 75)
            print(f"   Carregando dados de amplitude de '{os.path.basename(arquivo_beats_with_amplitude_processado)}'...")
            timestamp_to_amplitude_map, overall_max_amplitude = load_amplitude_data(arquivo_beats_with_amplitude_processado)

            if timestamp_to_amplitude_map and overall_max_amplitude > 0:
                print(f"   Maior amplitude geral encontrada: {overall_max_amplitude:.6f}")
                print(f"   Limite inferior para filtro ({min_amp_percentage}%): {(min_amp_percentage / 100.0) * overall_max_amplitude:.6f}")
                # This function overwrites the beats.txt file with filtered results
                filter_timestamps_by_amplitude(
                    arquivo_beats_processado, # This is the beats.txt file to be overwritten
                    timestamp_to_amplitude_map,
                    overall_max_amplitude,
                    min_amp_percentage
                )
            else:
                print("   ‚ö†Ô∏è N√£o foi poss√≠vel carregar dados de amplitude v√°lidos. Filtragem por amplitude pulada.")
        else:
            print("   ‚ö†Ô∏è Arquivos de batidas necess√°rios para filtragem n√£o encontrados. Filtragem por amplitude pulada.")
    else:
        print("\n‚ÑπÔ∏è Filtragem de batidas por amplitude desabilitada nas configura√ß√µes.")


    # --- 4. Processamento de V√≠deos (Download ou Localiza√ß√£o) e Extra√ß√£o de Frames ---
    processar_videos_geral = config.get("baixar_videos_da_lista") or config.get("extrair_frames_dos_videos")
    primeiro_video_com_frames_path = None
    primeiro_video_com_frames_nome_base = None

    if processar_videos_geral:
        if not os.path.exists(arquivo_links):
            print(f"\n‚ö†Ô∏è Arquivo de links '{arquivo_links}' n√£o encontrado.")
            print("   Processamento de v√≠deos e extra√ß√£o de frames pulados.")
        else:
            with open(arquivo_links, "r", encoding='utf-8') as f_links:
                links_videos = [linha.strip() for linha in f_links if linha.strip() and not linha.startswith("#")]

            if not links_videos:
                print(f"Nenhum link de v√≠deo v√°lido encontrado em '{arquivo_links}'.")
            else:
                print(f"\n‚ñ∂Ô∏è Iniciando processamento de v√≠deos de '{arquivo_links}'...")
                if not os.path.exists(pasta_destino_videos): # Garante que a pasta de destino principal exista
                    try:
                        os.makedirs(pasta_destino_videos, exist_ok=True)
                        print(f"Pasta principal de v√≠deos '{pasta_destino_videos}' criada.")
                    except OSError as e:
                        print(f"‚ö†Ô∏è Erro ao criar pasta principal '{pasta_destino_videos}': {e}. Processamento de v√≠deos pode falhar.")
                        # Decide se quer pular todos os v√≠deos ou tentar mesmo assim

                for link_video in links_videos:
                    print(f"\n--- Processando link: {link_video} ---")
                    caminho_video_final_para_frames = None

                    if config.get("baixar_videos_da_lista"):
                        caminho_video_baixado, _ = baixar_video(link_video, pasta_destino_videos)
                        if caminho_video_baixado:
                            caminho_video_final_para_frames = caminho_video_baixado
                            print(f"üéûÔ∏è V√≠deo baixado/localizado via download: {caminho_video_final_para_frames}")
                        else:
                            print(f"‚ö†Ô∏è Falha ao baixar v√≠deo de '{link_video}'.")

                    if not caminho_video_final_para_frames and config.get("extrair_frames_dos_videos"):
                        if not config.get("baixar_videos_da_lista"):
                             print(f"üéûÔ∏è Download de v√≠deo desabilitado. Tentando localizar v√≠deo para extra√ß√£o de frames...")

                        caminho_esperado_video = resolver_nome_arquivo_yt_dlp(link_video, pasta_destino_videos, extrair_audio=False)
                        if caminho_esperado_video and os.path.exists(caminho_esperado_video):
                            caminho_video_final_para_frames = caminho_esperado_video
                            print(f"üéûÔ∏è V√≠deo localizado para extra√ß√£o: {caminho_video_final_para_frames}")
                        else:
                            print(f"‚ö†Ô∏è V√≠deo n√£o encontrado localmente em '{pasta_destino_videos}' para o link '{link_video}'.")
                            if caminho_esperado_video:
                                print(f"   Caminho esperado (n√£o encontrado): {caminho_esperado_video}")

                    if caminho_video_final_para_frames and os.path.exists(caminho_video_final_para_frames) and config.get("extrair_frames_dos_videos"):
                        nome_base_video = os.path.splitext(os.path.basename(caminho_video_final_para_frames))[0]
                        pasta_frames_video = os.path.join(pasta_destino_videos, f"{nome_base_video}_frames")

                        # Guarda o primeiro v√≠deo que teve frames extra√≠dos/localizados para usar no generate_edit_from_beats
                        if not primeiro_video_com_frames_path and os.path.exists(pasta_frames_video):
                            # Verifica se a pasta de frames realmente cont√©m frames
                            if any(f.startswith("frame_") and f.lower().endswith(".jpg") for f in os.listdir(pasta_frames_video)):
                                primeiro_video_com_frames_path = pasta_frames_video
                                primeiro_video_com_frames_nome_base = os.path.basename(caminho_video_final_para_frames) # Ex: "video.mp4"
                                print(f"   üìπ V√≠deo '{primeiro_video_com_frames_nome_base}' com frames em '{primeiro_video_com_frames_path}' ser√° usado para 'generate_edit_from_beats' se habilitado.")

                        frames_info = extrair_frames(caminho_video_final_para_frames, pasta_frames_video, intervalo_para_frames_seg, qualidade_dos_frames_jpeg)
                        if frames_info:
                            print(f"üéûÔ∏è Frames de '{nome_base_video}' extra√≠dos com sucesso.")
                            # Se este √© o primeiro v√≠deo com frames e ainda n√£o foi definido, defina-o
                            if not primeiro_video_com_frames_path:
                                primeiro_video_com_frames_path = pasta_frames_video
                                primeiro_video_com_frames_nome_base = os.path.basename(caminho_video_final_para_frames)
                                print(f"   üìπ V√≠deo '{primeiro_video_com_frames_nome_base}' com frames em '{primeiro_video_com_frames_path}' ser√° usado para 'generate_edit_from_beats' se habilitado.")
                        # extrair_frames j√° lida com logs de erro ou nenhum frame extra√≠do
                    elif config.get("extrair_frames_dos_videos"): # Se extra√ß√£o habilitada mas v√≠deo n√£o dispon√≠vel
                        print(f"‚ÑπÔ∏è Extra√ß√£o de frames pulada para '{link_video}': arquivo de v√≠deo n√£o dispon√≠vel.")
    elif not config.get("criar_edit_final_do_json"): # S√≥ imprime se nenhuma outra a√ß√£o principal foi habilitada
        print("\n‚ÑπÔ∏è Download de v√≠deos e extra√ß√£o de frames desabilitados nas configura√ß√µes.")

    # --- 4.1. Detec√ß√£o de Cortes de Cena no V√≠deo (se habilitado) ---
    scene_detection_config = config.get("detectar_cortes_de_cena_video", {})
    if isinstance(scene_detection_config, dict) and scene_detection_config.get("enabled"):
        print("\n‚öôÔ∏è Tentando detectar cortes de cena no v√≠deo...")
        video_idx_to_analyze = scene_detection_config.get("video_source_index", 0)
        detection_threshold = scene_detection_config.get("threshold", 27.0)
        
        video_para_analise_de_cena = None
        
        if os.path.exists(arquivo_links):
            with open(arquivo_links, "r", encoding='utf-8') as f_links_sd:
                links_videos_sd = [linha.strip() for linha in f_links_sd if linha.strip() and not linha.startswith("#")]
            
            if 0 <= video_idx_to_analyze < len(links_videos_sd):
                url_video_para_cena = links_videos_sd[video_idx_to_analyze]
                # Tenta localizar o v√≠deo baixado correspondente a esta URL
                caminho_video_esperado_para_cena = resolver_nome_arquivo_yt_dlp(url_video_para_cena, pasta_destino_videos, extrair_audio=False)
                if caminho_video_esperado_para_cena and os.path.exists(caminho_video_esperado_para_cena):
                    video_para_analise_de_cena = caminho_video_esperado_para_cena
                else:
                    print(f"   ‚ö†Ô∏è V√≠deo para an√°lise de cena (√≠ndice {video_idx_to_analyze} de links.txt) n√£o encontrado em '{pasta_destino_videos}'.")
                    if caminho_video_esperado_para_cena:
                         print(f"      Caminho esperado: {caminho_video_esperado_para_cena}")
            else:
                print(f"   ‚ö†Ô∏è √çndice de v√≠deo para an√°lise de cena ({video_idx_to_analyze}) fora do intervalo de links em '{arquivo_links}'.")
        else:
            print(f"   ‚ö†Ô∏è Arquivo de links '{arquivo_links}' n√£o encontrado. N√£o √© poss√≠vel determinar o v√≠deo para an√°lise de cena.")

        if video_para_analise_de_cena:
            output_json_scene_cuts = os.path.join(pasta_destino_videos, "cenas_detectadas.json") # Nome do arquivo de sa√≠da alterado
            detectar_cortes_de_cena(video_para_analise_de_cena, output_json_scene_cuts, threshold=detection_threshold)
        else:
            print("   ‚ÑπÔ∏è Detec√ß√£o de cortes de cena pulada: v√≠deo fonte n√£o p√¥de ser determinado ou encontrado.")
    else:
        print("\n‚ÑπÔ∏è Detec√ß√£o de cortes de cena no v√≠deo desabilitada nas configura√ß√µes.")

    # --- 5. Gerar edit.json a partir das batidas (se habilitado) ---
    generate_edit_config = config.get("generate_edit_from_beats", {})
    if isinstance(generate_edit_config, dict) and generate_edit_config.get("enabled"):
        print("\n‚öôÔ∏è Tentando gerar 'edit.json' a partir de arquivos existentes (batidas e frames)...")

        caminho_batidas_a_usar = None
        nome_audio_para_json = None
        pasta_frames_a_usar = None
        nome_video_para_json = None

        # A. Determinar arquivo de batidas (.txt) a partir de 'songs/analise_batidas'
        pasta_batidas_dir = os.path.join(songs_directory, "analise_batidas")
        # Agora buscamos especificamente por beats.txt, que √© o arquivo potencialmente filtrado
        caminho_beats_txt_esperado = os.path.join(pasta_batidas_dir, "beats.txt")
        if os.path.exists(caminho_beats_txt_esperado):
             caminho_batidas_a_usar = caminho_beats_txt_esperado
             print(f"   üé∂ Usando arquivo de batidas: {caminho_batidas_a_usar}")
        else:
            print(f"   ‚ö†Ô∏è Arquivo de batidas '{caminho_beats_txt_esperado}' n√£o encontrado.")


        # B. Determinar nome do √°udio para JSON a partir da pasta 'songs'
        if os.path.exists(songs_directory) and os.path.isdir(songs_directory):
            audio_extensions = ('.mp3', '.wav', '.aac', '.m4a', '.ogg', '.flac')
            for f_name in sorted(os.listdir(songs_directory)):
                if os.path.isfile(os.path.join(songs_directory, f_name)) and f_name.lower().endswith(audio_extensions):
                    nome_audio_para_json = f_name
                    print(f"   üéµ Usando primeiro arquivo de √°udio encontrado em '{songs_directory}': {nome_audio_para_json}")
                    break
        if not nome_audio_para_json:
            print(f"   ‚ö†Ô∏è Nenhum arquivo de √°udio ({', '.join(audio_extensions)}) encontrado em '{songs_directory}'.")

        # C. Determinar pasta de frames do v√≠deo a partir de 'videos_baixados'
        if os.path.exists(pasta_destino_videos) and os.path.isdir(pasta_destino_videos):
            for entry_name in sorted(os.listdir(pasta_destino_videos)):
                potential_frames_dir = os.path.join(pasta_destino_videos, entry_name)
                if os.path.isdir(potential_frames_dir) and entry_name.lower().endswith("_frames"):
                    # Verificar se a pasta cont√©m arquivos .jpg
                    if any(f.lower().endswith(".jpg") for f in os.listdir(potential_frames_dir) if os.path.isfile(os.path.join(potential_frames_dir, f))):
                        pasta_frames_a_usar = potential_frames_dir
                        print(f"   üñºÔ∏è Usando primeira pasta de frames (com .jpg e terminada em '_frames') encontrada: {pasta_frames_a_usar}")
                        break
        if not pasta_frames_a_usar:
            print(f"   ‚ö†Ô∏è Nenhuma pasta de frames (terminada em '_frames' e contendo .jpg) encontrada em '{pasta_destino_videos}'.")

        # D. Determinar nome do v√≠deo para JSON a partir de 'videos_baixados'
        if os.path.exists(pasta_destino_videos) and os.path.isdir(pasta_destino_videos):
            video_extensions = ('.mp4', '.webm', '.mkv', '.avi', '.mov')
            for f_name in sorted(os.listdir(pasta_destino_videos)):
                if os.path.isfile(os.path.join(pasta_destino_videos, f_name)) and f_name.lower().endswith(video_extensions):
                    nome_video_para_json = f_name
                    print(f"   üéûÔ∏è Usando primeiro arquivo de v√≠deo encontrado em '{pasta_destino_videos}': {nome_video_para_json}")
                    break
        if not nome_video_para_json:
            print(f"   ‚ö†Ô∏è Nenhum arquivo de v√≠deo ({', '.join(video_extensions)}) encontrado em '{pasta_destino_videos}'.")

        # E. Gerar JSON se todos os componentes foram encontrados/determinados
        if caminho_batidas_a_usar and pasta_frames_a_usar and nome_video_para_json and nome_audio_para_json:
            # Check if the beats file is empty after potential filtering
            try:
                with open(caminho_batidas_a_usar, 'r', encoding='utf-8') as f:
                    first_line = f.readline().strip()
                    if not first_line:
                        print(f"‚ö†Ô∏è Arquivo de batidas '{caminho_batidas_a_usar}' est√° vazio ap√≥s a filtragem. N√£o √© poss√≠vel gerar 'edit.json'.")
                        caminho_batidas_a_usar = None # Marca como n√£o utiliz√°vel
            except Exception as e:
                 print(f"‚ö†Ô∏è Erro ao ler arquivo de batidas '{caminho_batidas_a_usar}': {e}. N√£o √© poss√≠vel gerar 'edit.json'.")
                 caminho_batidas_a_usar = None # Marca como n√£o utiliz√°vel


        if caminho_batidas_a_usar and pasta_frames_a_usar and nome_video_para_json and nome_audio_para_json:
             gerar_edit_json_pelas_batidas(
                 caminho_batidas_a_usar,
                 pasta_frames_a_usar,
                 nome_video_para_json,
                 nome_audio_para_json,
                 generate_edit_config, # Passa todo o sub-dicion√°rio de config
                 pasta_destino_videos, # Para localizar cenas_detectadas.json
                 edit_json_file # Nome do arquivo de sa√≠da
             )
        else:
            print("‚ö†Ô∏è N√£o foi poss√≠vel gerar 'edit.json' a partir das batidas: um ou mais arquivos/pastas necess√°rios n√£o foram encontrados ou determinados.")
            if not caminho_batidas_a_usar: print("      - Arquivo de batidas n√£o determinado/encontrado ou vazio.") # Updated message
            if not pasta_frames_a_usar: print("      - Pasta de frames n√£o determinada/encontrada ou vazia.")
            if not nome_video_para_json: print("      - Nome do v√≠deo para JSON n√£o determinado.") # Updated message
            if not nome_audio_para_json: print("      - Nome do √°udio para JSON n√£o determinado.")
    else:
        print("\n‚ÑπÔ∏è Gera√ß√£o de 'edit.json' a partir das batidas desabilitada nas configura√ß√µes.")

    # --- 6. L√≥gica para criar o edit final a partir do edit.json (se habilitado) ---
    # Esta etapa agora pode usar o edit.json gerado na etapa anterior ou um existente.
    if config.get("criar_edit_final_do_json", False):
        if os.path.exists(edit_json_file):
            print(f"\n‚ÑπÔ∏è Arquivo '{edit_json_file}' encontrado. Tentando criar edit final...")
            try:
                with open(edit_json_file, "r", encoding='utf-8') as f:
                    conteudo_edit = json.load(f)
                criar_edite_do_json(conteudo_edit, config, BASE_DIR) # Passa o dicion√°rio config e BASE_DIR
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è Erro ao decodificar '{edit_json_file}': {e}. N√£o ser√° poss√≠vel criar o edit.")
            except Exception as e:
                import traceback
                print(f"‚ö†Ô∏è Erro ao processar '{edit_json_file}' para cria√ß√£o do edit: {e}")
                print("Detalhes do erro:")
                traceback.print_exc()

        else:
            print(f"‚ö†Ô∏è Arquivo '{edit_json_file}' n√£o encontrado. Cria√ß√£o do edit final pulada.")
    if not config.get("criar_edit_final_do_json"):
         print("\n‚ÑπÔ∏è Cria√ß√£o do edit final desabilitada nas configura√ß√µes.")

    print("\nüèÅ Processo conclu√≠do.")
    try:
        system_os = platform.system()
        played_custom_sound = False
        if system_os == "Darwin":  # macOS
            # Tenta tocar um som de sistema mais chamativo no macOS
            # Lista de sons em ordem de prefer√™ncia (mais chamativo primeiro)
            preferred_sounds = [
                "/System/Library/Sounds/Hero.aiff",
                "/System/Library/Sounds/Hero.aiff",
                "/System/Library/Sounds/Hero.aiff",
                "/System/Library/Sounds/Hero.aiff",
                "/System/Library/Sounds/Glass.aiff" # O anterior como fallback
            ]
            for sound_file_path in preferred_sounds:
                if os.path.exists(sound_file_path):
                    subprocess.run(["afplay", sound_file_path], check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    played_custom_sound = True
                    # break # Remove break to play all preferred sounds if available
        # For other OS or if no preferred sound was played on macOS, play the bell sound
        if not played_custom_sound:
             # Para Linux, Windows e outros, ou como fallback no macOS
             # Emite o som de sino (BEL) m√∫ltiplas vezes para ser mais chamativo
             for _ in range(3): # Repete 3 vezes
                 print('\a', end='', flush=True) # end='' e flush=True para tentar garantir emiss√£o imediata
                 time.sleep(0.3) # Pequena pausa entre os sinos
    except Exception:
        print('\a')  # Fallback final para qualquer erro durante a tentativa de tocar som
